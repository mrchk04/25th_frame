class UserProfile {
    constructor() {
        this.baseURL = 'http://localhost:3000';
        this.token = localStorage.getItem('authToken');
        this.currentUser = null;
        this.userTickets = [];
        
        this.init();
    }

    async init() {
        if (!this.token || !localStorage.getItem('currentUser')) {
            window.location.href = 'login.html';
            return;
        }

        this.currentUser = JSON.parse(localStorage.getItem('currentUser'));
        this.renderUserData(this.currentUser);
        this.setupEventListeners();
        await this.loadUserTickets();
    }

    renderUserData(userData) {
        document.getElementById('user-name').textContent = `–í—ñ—Ç–∞—î–º–æ, ${userData.name || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}!`;
        document.getElementById('name').value = userData.name || '';
        document.getElementById('email').value = userData.email || '';
        document.getElementById('phone').value = userData.phone || '';
        document.getElementById('birthday').value = userData.birthday || '';

        if (userData.settings) {
            document.getElementById('email-notifications').checked = !!userData.settings.emailNotifications;
            document.getElementById('sms-notifications').checked = !!userData.settings.smsNotifications;
        }
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏
        const tabLinks = document.querySelectorAll('.profile-menu li');
        const tabContents = document.querySelectorAll('.profile-tab');

        tabLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                tabLinks.forEach(l => l.classList.remove('active'));
                tabContents.forEach(c => c.classList.remove('active'));

                e.target.classList.add('active');
                const tabId = e.target.getAttribute('data-tab');
                document.getElementById(tabId).classList.add('active');

                // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∫–≤–∏—Ç–∫—ñ–≤
                if (tabId === 'tickets') {
                    this.loadUserTickets();
                }
            });
        });

        // –§–æ—Ä–º–∞ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö
        document.getElementById('personal-info-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.updatePersonalInfo();
        });

        // –§–æ—Ä–º–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        document.getElementById('settings-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.updateSettings();
        });

        // –ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É
        document.getElementById('logout-btn').addEventListener('click', () => {
            this.logout();
        });
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    async loadUserTickets() {
        try {
            const response = await fetch(`${this.baseURL}/api/tickets/my`, {
                headers: { 'Authorization': `Bearer ${this.token}` }
            });

            if (response.ok) {
                const data = await response.json();
                this.userTickets = data.tickets;
                this.renderTickets();
            } else {
                throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤');
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤:', error);
            this.showTicketsError();
        }
    }

    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤
    renderTickets() {
        const ticketsContainer = document.getElementById('tickets-container');
        
        if (this.userTickets.length === 0) {
            ticketsContainer.innerHTML = '<p class="no-data-message">–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∫–≤–∏—Ç–∫—ñ–≤</p>';
            return;
        }

        ticketsContainer.innerHTML = '';
        
        // –ì—Ä—É–ø—É—î–º–æ –∫–≤–∏—Ç–∫–∏ –∑–∞ —Å–µ–∞–Ω—Å–∞–º–∏
        const groupedTickets = this.groupTicketsBySession();
        
        Object.entries(groupedTickets).forEach(([sessionKey, tickets]) => {
            const ticketGroup = this.createTicketGroup(sessionKey, tickets);
            ticketsContainer.appendChild(ticketGroup);
        });
    }

    // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤ –∑–∞ —Å–µ–∞–Ω—Å–∞–º–∏
    groupTicketsBySession() {
        return this.userTickets.reduce((groups, ticket) => {
            const sessionKey = `${ticket.film_title}-${ticket.session_date}-${ticket.hall_id}`;
            if (!groups[sessionKey]) {
                groups[sessionKey] = [];
            }
            groups[sessionKey].push(ticket);
            return groups;
        }, {});
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –∫–≤–∏—Ç–∫—ñ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–µ–∞–Ω—Å—É
    createTicketGroup(sessionKey, tickets) {
        const firstTicket = tickets[0];
        const sessionDate = new Date(firstTicket.session_date);
        const isUpcoming = sessionDate > new Date();
        const canCancel = this.canCancelTicket(sessionDate);

        const ticketGroup = document.createElement('div');
        ticketGroup.className = 'ticket-card';
        
        // –ö–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ
        const totalCost = tickets.reduce((sum, ticket) => {
            return sum + parseFloat(ticket.price || 0);
        }, 0);
        
        // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
        const formattedDate = sessionDate.toLocaleDateString('uk-UA', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        const formattedTime = sessionDate.toLocaleTimeString('uk-UA', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        ticketGroup.innerHTML = `
            <div class="ticket-card-header">
                <div class="movie-title-section">
                    <h3 class="movie-title">${firstTicket.film_title}</h3>
                    <span class="ticket-badge">${tickets.length} ${this.getTicketWord(tickets.length)}</span>
                </div>
            </div>
            
            <div class="ticket-card-body">
                <div class="session-info-grid">
                    <div class="info-item">
                        <div class="info-label">–î–∞—Ç–∞:</div>
                        <div class="info-value">${formattedDate}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–ß–∞—Å:</div>
                        <div class="info-value">${formattedTime}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–ó–∞–ª:</div>
                        <div class="info-value">‚Ññ${firstTicket.hall_id}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–°—Ç–∞—Ç—É—Å:</div>
                        <div class="info-value">
                            <span class="status-indicator ${isUpcoming ? 'active' : 'past'}">
                                ${isUpcoming ? '–ú–∞–π–±—É—Ç–Ω—ñ–π —Å–µ–∞–Ω—Å' : '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–π —Å–µ–∞–Ω—Å'}
                            </span>
                        </div>
                    </div>
                </div>
                
                <div class="seats-section">
                    <div class="seats-header">
                        <span class="seats-icon">üé´</span>
                        <span class="seats-title">–ú—ñ—Å—Ü—è:</span>
                    </div>
                    <div class="seats-list">
                        ${tickets.map(ticket => `
                            <div class="seat-item">
                                <div class="seat-location">
                                    <span class="seat-row">–†—è–¥ ${ticket.seat_row}</span>
                                    <span class="seat-number">–ú—ñ—Å—Ü–µ ${ticket.seat_number}</span>
                                </div>
                                <div class="seat-price">${parseFloat(ticket.price).toFixed(2)} –≥—Ä–Ω</div>
                                <div class="seat-ticket-id">–ö–≤–∏—Ç–æ–∫ ‚Ññ${ticket.id}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
            
            <div class="ticket-card-footer">
                <div class="total-section">
                    <span class="total-label">–ó–∞–≥–∞–ª—å–Ω–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</span>
                    <span class="total-amount">${totalCost.toFixed(2)} –≥—Ä–Ω</span>
                </div>
                
                ${canCancel ? `
                    <button class="cancel-button" data-session="${sessionKey}">
                        <span class="cancel-icon">üóëÔ∏è</span>
                        –°–∫–∞—Å—É–≤–∞—Ç–∏
                    </button>` : ''}
            </div>
        `;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤
        const cancelBtn = ticketGroup.querySelector('.cancel-button');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => {
                this.cancelTickets(tickets);
            });
        }

        return ticketGroup;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫–∞
    canCancelTicket(sessionDate) {
        const now = new Date();
        const timeDiff = sessionDate.getTime() - now.getTime();
        const hoursDiff = timeDiff / (1000 * 60 * 60);
        return hoursDiff > 2; // –ú–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞ 2+ –≥–æ–¥–∏–Ω–∏ –¥–æ —Å–µ–∞–Ω—Å—É
    }

    // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤
    async cancelTickets(tickets) {
        const firstTicket = tickets[0];
        const sessionDate = new Date(firstTicket.session_date);
        
        if (!this.canCancelTicket(sessionDate)) {
            this.showNotification('–ö–≤–∏—Ç–∫–∏ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –Ω–µ –ø—ñ–∑–Ω—ñ—à–µ –Ω—ñ–∂ –∑–∞ 2 –≥–æ–¥–∏–Ω–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É —Å–µ–∞–Ω—Å—É', 'warning');
            return;
        }

        const confirmMessage = `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ ${tickets.length} ${this.getTicketWord(tickets.length)} –Ω–∞ —Ñ—ñ–ª—å–º "${firstTicket.film_title}"?`;
        
        if (!confirm(confirmMessage)) {
            return;
        }

        try {
            let cancelledCount = 0;
            
            for (const ticket of tickets) {
                const response = await fetch(`${this.baseURL}/api/tickets/${ticket.id}`, {
                    method: 'DELETE',
                    headers: { 'Authorization': `Bearer ${this.token}` }
                });

                if (response.ok) {
                    cancelledCount++;
                } else {
                    const errorData = await response.json();
                    console.error(`–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫–∞ ${ticket.id}:`, errorData.message);
                }
            }

            if (cancelledCount > 0) {
                this.showNotification(`–£—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ ${cancelledCount} ${this.getTicketWord(cancelledCount)}`, 'success');
                await this.loadUserTickets(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–≤–∏—Ç–∫—ñ–≤
            } else {
                this.showNotification('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –∫–≤–∏—Ç–∫–∞', 'error');
            }

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤:', error);
            this.showNotification('–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤', 'error');
        }
    }

    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞ "–∫–≤–∏—Ç–æ–∫"
    getTicketWord(count) {
        if (count === 1) return "–∫–≤–∏—Ç–æ–∫";
        if (count >= 2 && count <= 4) return "–∫–≤–∏—Ç–∫–∏";
        return "–∫–≤–∏—Ç–∫—ñ–≤";
    }

    // –ü–æ–∫–∞–∑ –ø–æ–º–∏–ª–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤
    showTicketsError() {
        const ticketsContainer = document.getElementById('tickets-container');
        ticketsContainer.innerHTML = `
            <div class="error-message">
                <p>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–≤–∏—Ç–∫—ñ–≤</p>
                <button class="btn-retry" onclick="userProfile.loadUserTickets()">–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
            </div>
        `;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    updatePersonalInfo() {
        this.currentUser = {
            ...this.currentUser,
            name: document.getElementById('name').value.trim(),
            email: document.getElementById('email').value.trim(),
            phone: document.getElementById('phone').value.trim(),
            birthday: document.getElementById('birthday').value
        };

        localStorage.setItem('currentUser', JSON.stringify(this.currentUser));
        this.renderUserData(this.currentUser);

        this.showNotification('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    updateSettings() {
        const currentPassword = document.getElementById('current-password').value;
        const newPassword = document.getElementById('new-password').value;
        const confirmPassword = document.getElementById('confirm-password').value;

        if (currentPassword && newPassword) {
            if (newPassword !== confirmPassword) {
                this.showNotification('–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!', 'warning');
                return;
            }
            this.showNotification('–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!', 'success');
        }

        this.currentUser.settings = {
            emailNotifications: document.getElementById('email-notifications').checked,
            smsNotifications: document.getElementById('sms-notifications').checked
        };

        localStorage.setItem('currentUser', JSON.stringify(this.currentUser));

        if (!currentPassword) {
            this.showNotification('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
        }
    }

    // –í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏
    logout() {
        if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–∏?')) {
            localStorage.removeItem('authToken');
            localStorage.removeItem('currentUser');
            window.location.href = 'index.html';
        }
    }

    // –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    showNotification(message, type = 'info') {
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notification => notification.remove());

        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        
        const colors = {
            success: '#4CAF50',
            error: '#f44336',
            warning: '#FF9800',
            info: '#2196F3'
        };

        notification.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            z-index: 1000;
            max-width: 300px;
            background-color: ${colors[type] || colors.info};
            transform: translateX(110%);
            transition: transform 0.3s ease;
        `;

        notification.textContent = message;
        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);

        setTimeout(() => {
            notification.style.transform = 'translateX(110%)';
            setTimeout(() => notification.remove(), 300);
        }, 3000);

        notification.addEventListener('click', () => notification.remove());
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
let userProfile;

document.addEventListener('DOMContentLoaded', function() {
    userProfile = new UserProfile();
    
    // –î–æ–¥–∞—î–º–æ CSS —Å—Ç–∏–ª—ñ –¥–ª—è –∫–≤–∏—Ç–∫—ñ–≤
    const styles = document.createElement('style');
    styles.textContent = `
        /* –û—Å–Ω–æ–≤–Ω–∞ –∫–∞—Ä—Ç–∫–∞ */
    .ticket-card {
        background: #2a2a2a;
        border-radius: 12px;
        margin-bottom: 20px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
        overflow: hidden;
        transition: all 0.3s ease;
        border: 1px solid #404040;
    }
    
    .ticket-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
        border-color: #666;
    }
    
    /* –•–µ–¥–µ—Ä */
    .ticket-card-header {
        padding: 20px 24px;
        background: #333;
        border-bottom: 1px solid #404040;
    }
    
    .movie-title-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .movie-title {
        margin: 0;
        font-size: 20px;
        font-weight: 600;
        color: #ffffff;
        line-height: 1.3;
    }
    
    .ticket-badge {
        background: #780000;
        color: #ffffff;
        padding: 6px 12px;
        border-radius: 16px;
        font-size: 13px;
        font-weight: 600;
        letter-spacing: 0.5px;
    }
    
    /* –¢—ñ–ª–æ –∫–∞—Ä—Ç–∫–∏ */
    .ticket-card-body {
        padding: 24px;
    }
    
    /* –°—ñ—Ç–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ–∞–Ω—Å */
    .session-info-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 16px;
        margin-bottom: 24px;
    }
    
    .info-item {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }
    
    .info-label {
        font-size: 13px;
        color: #999;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .info-value {
        font-size: 15px;
        color: #ffffff;
        font-weight: 500;
    }
    
    .status-indicator {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 6px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .status-indicator.active {
        background: rgba(76, 175, 80, 0.2);
        color: #4CAF50;
        border: 1px solid rgba(76, 175, 80, 0.3);
    }
    
    .status-indicator.past {
        background: rgba(158, 158, 158, 0.2);
        color: #9E9E9E;
        border: 1px solid rgba(158, 158, 158, 0.3);
    }
    
    /* –°–µ–∫—Ü—ñ—è –º—ñ—Å—Ü—å */
    .seats-section {
        border-top: 1px solid #404040;
        padding-top: 20px;
    }
    
    .seats-header {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 16px;
    }
    
    .seats-icon {
        font-size: 16px;
    }
    
    .seats-title {
        font-size: 16px;
        font-weight: 600;
        color: #ffffff;
    }
    
    .seats-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }
    
    .seat-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        background: #363636;
        border-radius: 8px;
        border: 1px solid #484848;
        transition: all 0.2s ease;
    }
    
    .seat-item:hover {
        background: #404040;
        border-color: #666;
    }
    
    .seat-location {
        display: flex;
        flex-direction: column;
        gap: 2px;
    }
    
    .seat-row {
        font-size: 14px;
        font-weight: 600;
        color: #ffffff;
    }
    
    .seat-number {
        font-size: 13px;
        color: #ccc;
    }
    
    .seat-price {
        font-size: 15px;
        font-weight: 600;
        color: #4CAF50;
    }
    
    .seat-ticket-id {
        font-size: 11px;
        color: #888;
        font-family: 'Courier New', monospace;
        letter-spacing: 0.5px;
    }
    
    /* –§—É—Ç–µ—Ä */
    .ticket-card-footer {
        padding: 20px 24px;
        background: #333;
        border-top: 1px solid #404040;
        display: flex;
        flex-direction: column;
        gap: 16px;
    }
    
    .total-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 20px;
        background: #2a2a2a;
        border-radius: 8px;
        border: 1px solid #484848;
    }
    
    .total-label {
        font-size: 16px;
        font-weight: 600;
        color: #ffffff;
    }
    
    .total-amount {
        font-size: 18px;
        font-weight: 700;
        color: #4CAF50;
    }
    
    .cancel-button {
        width: 100%;
        padding: 14px 20px;
        background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
        color: #ffffff;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        box-shadow: 0 2px 8px rgba(244, 67, 54, 0.3);
    }
    
    .cancel-button:hover {
        background: linear-gradient(135deg, #d32f2f 0%, #b71c1c 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(244, 67, 54, 0.4);
    }
    
    .cancel-button:active {
        transform: translateY(0);
    }
    
    .cancel-icon {
        font-size: 14px;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å */
    @media (max-width: 768px) {
        .session-info-grid {
            grid-template-columns: 1fr;
            gap: 12px;
        }
        
        .movie-title-section {
            flex-direction: column;
            align-items: flex-start;
            gap: 12px;
        }
        
        .ticket-badge {
            align-self: flex-end;
        }
        
        .seat-item {
            flex-direction: column;
            align-items: flex-start;
            gap: 8px;
            text-align: left;
        }
        
        .seat-ticket-id {
            align-self: flex-end;
        }
    }
    
    @media (max-width: 480px) {
        .ticket-card-header,
        .ticket-card-body,
        .ticket-card-footer {
            padding: 16px 20px;
        }
        
        .movie-title {
            font-size: 18px;
        }
        
        .total-section {
            padding: 12px 16px;
        }
        
        .cancel-button {
            padding: 12px 16px;
            font-size: 13px;
        }
    }
    
    /* –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –¥–ª—è —Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏ */
    .tickets-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
        width: 100%;
    }
    
    /* –ê–Ω—ñ–º–∞—Ü—ñ—ó */
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .ticket-card {
        animation: slideIn 0.3s ease-out;
    }
    `;
    document.head.appendChild(styles);
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
window.userProfile = userProfile;